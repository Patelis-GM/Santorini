imminentWinPoints :: Int -> Int -> [Block] -> Int -> Int
imminentWinPoints _ oa [] 1
  | oa == 0 = 250
  | oa == 0 = 200
  | oa == 1 = 50
  | oa == 2 = 5
imminentWinPoints _ _ [] 2 = 500
  | oa == 2 = 10
imminentWinPoints _ _ [] 2 = 1000
imminentWinPoints _ _ [] _ = 0
imminentWinPoints _ _ _ 2 = 500
imminentWinPoints _ _ _ 2 = 1000
imminentWinPoints pf oa ((ap,af):bs) total
  | pf /= 2 = 0
  | pf == 2 && ap == 0 && af == 3 = imminentWinPoints pf oa bs (total + 1)
  | otherwise = imminentWinPoints pf oa bs total


getImminentWinPoints :: (Block,Block) -> ([Block],[Block]) -> (Int,Int) -> Int
getImminentWinPoints ((_,tf1),(_,tf2)) (n1,n2) (oab1,oab2)
  | firstPoints == 500 || secondPoints == 500 = 500
  | otherwise = firstPoints + secondPoints
  where firstPoints = imminentWinPoints tf1 oab1 n1 0
        secondPoints = imminentWinPoints tf2 oab2 n2 0

opponentsAround :: Bool -> Int -> [Block] -> Int
opponentsAround _ total [] = total
opponentsAround _ 2 _ = 2
opponentsAround bluePlayer total ((p,_):bs)
  | bluePlayer == True && (p == 2 || p == 4) = opponentsAround bluePlayer (total + 1) bs
  | bluePlayer == True && (p == 1 || p == 3 || p == 0) = opponentsAround bluePlayer total bs
  | bluePlayer == False && (p == 1 || p == 3) = opponentsAround bluePlayer (total + 1) bs
  | bluePlayer == False && (p == 2 || p == 4 || p == 0) = opponentsAround bluePlayer total bs


surroundingsPoints :: Int -> Int -> [Block] -> Int
surroundingsPoints _ _ [] = 0
surroundingsPoints pf oa ((_,af):bs)
  | fd == 1 && pf == 0 && oa == 0 = 5 + surroundingsPoints pf oa bs
  | fd == 1 && pf == 0 && oa == 1 = 3 + surroundingsPoints pf oa bs
  | fd == 1 && pf == 0 && oa == 2 = 1 + surroundingsPoints pf oa bs
  | fd == 1 && pf == 1 && oa == 0 = 15 + surroundingsPoints pf oa bs
  | fd == 1 && pf == 1 && oa == 1 = 13 + surroundingsPoints pf oa bs
  | fd == 1 && pf == 1 && oa == 2 = 11 + surroundingsPoints pf oa bs
  | fd == 1 && pf == 2 && oa == 0 = 20 + surroundingsPoints pf oa bs
  | fd == 1 && pf == 2 && oa == 1 = 18 + surroundingsPoints pf oa bs
  | fd == 1 && pf == 2 && oa == 2 = 16 + surroundingsPoints pf oa bs
  | fd == 2 && oa == 0 = (-35) + surroundingsPoints pf oa bs
  | fd == 2 && oa == 1 = (-40) + surroundingsPoints pf oa bs
  | fd == 2 && oa == 2 = (-45) + surroundingsPoints pf oa bs
  | fd == 3 && oa == 0 = (-50) + surroundingsPoints pf oa bs
  | fd == 3 && oa == 1 = (-55) + surroundingsPoints pf oa bs
  | fd == 3 && oa == 2 = (-60) + surroundingsPoints pf oa bs
  | fd == 4 = (-65) + surroundingsPoints pf oa bs
  | fd == 2 && oa == 0 = (-5) + surroundingsPoints pf oa bs
  | fd == 2 && oa == 1 = (-10) + surroundingsPoints pf oa bs
  | fd == 2 && oa == 2 = (-15) + surroundingsPoints pf oa bs
  | fd == 3 && oa == 0 = (-20) + surroundingsPoints pf oa bs
  | fd == 3 && oa == 1 = (-25) + surroundingsPoints pf oa bs
  | fd == 3 && oa == 2 = (-30) + surroundingsPoints pf oa bs
  | fd == 0 = surroundingsPoints pf oa bs
  | otherwise = (-60) + surroundingsPoints pf oa bs
    where fd = af - pf

getSurroundingsPoints :: (Block,Block) -> ([Block],[Block]) -> (Int,Int) -> Int
getSurroundingsPoints ((_,tf1),(_,tf2)) (n1,n2) (oab1,oab2) = firstPoints + secondPoints
  where firstPoints = surroundingsPoints tf1 oab1 n1
        secondPoints = surroundingsPoints tf2 oab2 n2